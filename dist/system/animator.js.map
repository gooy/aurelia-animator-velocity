{"version":3,"sources":["animator.js"],"names":[],"mappings":"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","file":"animator.js","sourceRoot":"/source/","sourcesContent":["import Velocity from 'velocity';\r\nimport JSOL from 'jsol';\r\n\r\n/**\r\n * Aurelia animator implementation using Velocity\r\n */\r\nexport class VelocityAnimator {\r\n\r\n  /**\r\n   * Default options for velocity\r\n   * @type {Object}\r\n   */\r\n  options = {\r\n    duration: 500,\r\n    easing:\"linear\"\r\n  };\r\n\r\n  /**\r\n   * Default enter animation\r\n   * @type {Object}\r\n   */\r\n  enterAnimation = {properties:\"fadeIn\",options:{duration:200}};\r\n  /**\r\n   * Default leave animation\r\n   * @type {Object}\r\n   */\r\n  leaveAnimation = {properties:\"fadeOut\",options:{duration:200}};\r\n\r\n  constructor(){\r\n    this.isAnimating = false;\r\n\r\n    //setup method aliases\r\n    this.animate = this.move;\r\n  }\r\n\r\n  //--------------------------------- Aurelia Animator interface\r\n\r\n  /**\r\n   * Run a animation by name or by manually specifying properties and options for it\r\n   *\r\n   * @param element {HTMLElement}   Element to animate\r\n   * @param props {Object}          element properties to animate\r\n   * @param options {Object}        animation options\r\n   *\r\n   * @returns {Promise} resolved when animation is complete\r\n   */\r\n  move(element,props,options) {\r\n    this.isAnimating = true;\r\n    return new Promise(resolve=>{\r\n      var defaults = {\r\n        complete:elements=>{\r\n          this.isAnimating = false;\r\n          resolve(true);\r\n        }\r\n      };\r\n      Velocity(element, props, Object.assign(this.options,defaults,options));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Run the enter animation on an element\r\n   *\r\n   * @param element {HTMLElement}   Element to animate\r\n   * @returns {Promise} resolved when animation is complete\r\n   */\r\n  enter(element) {\r\n    return this._runElementAnimation(element,\"enter\");\r\n  }\r\n\r\n  /**\r\n   * Run the leave animation on an element\r\n   *\r\n   * @param element {HTMLElement}   Element to animate\r\n   * @returns {Promise} resolved when animation is complete\r\n   */\r\n  leave(element) {\r\n    return this._runElementAnimation(element,\"leave\");\r\n  }\r\n\r\n  //these functions are not used with javascript animations\r\n  removeClass(element, className) { return Promise.resolve(false); }\r\n  addClass(element, className) { return Promise.resolve(false); }\r\n\r\n  //--------------------------------- Extra public interface\r\n\r\n  /**\r\n   * Register a new effect by name\r\n   *\r\n   * @param name {String}   name for the effect\r\n   * @param props {Object}  properties for the effect\r\n   */\r\n  registerEffect(name,props){\r\n    Velocity.registerEffect(name,props);\r\n  }\r\n\r\n  /**\r\n   * Run a seqeunce of animations, one after the other\r\n   *\r\n   * @param sequence {Array}  array of animations\r\n   */\r\n  runSequence(sequence){\r\n    Velocity.runSequence(sequence);\r\n  }\r\n\r\n  //--------------------------------- Private methods\r\n\r\n  /**\r\n   * Run animation by type name\r\n   *\r\n   * @param element {HTMLElement}   Element to animate\r\n   * @param name {String}           Name of the animation to run\r\n   *\r\n   * @returns {Promise} resolved when animation is complete\r\n   */\r\n  _runElementAnimation(element,name){\r\n    var properties;\r\n    var options = {};\r\n\r\n    //parse animation properties for this element if none were found\r\n    //if(!element.animations)\r\n      this._parseAnimations(element);\r\n    if(element.animations[name]) {\r\n      properties = element.animations[name].properties;\r\n      options = element.animations[name].options;\r\n    }\r\n\r\n    //skip if no enter animation was specified\r\n    if(!properties) return Promise.resolve(false);\r\n\r\n    this.isAnimating = true;\r\n    return new Promise(resolve=>{\r\n      var defaults = {\r\n        complete:elements=>{\r\n          this.isAnimating = false;\r\n          resolve(true);\r\n        }\r\n      };\r\n      options = Object.assign({},this.options,defaults,options);\r\n      Velocity(element, properties, options);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parse animations specified in the elements attributes\r\n   *\r\n   * @param element {HTMLElement}   Element to parse animations from\r\n   */\r\n  _parseAnimations(element){\r\n    element.animations = {};\r\n    element.animations.enter = this.parseAttributeValue(element.getAttribute(\"animation-enter\"))||this.enterAnimation;\r\n    element.animations.leave = this.parseAttributeValue(element.getAttribute(\"animation-leave\"))||this.leaveAnimation;\r\n  }\r\n\r\n  /**\r\n   * Parse an attribute value as an animation definition\r\n   *\r\n   * syntax with effectname:     effectName:{prop1:value,prop2:value}\r\n   * syntax with properties:     {prop1:value,prop2:value}:{prop1:value,prop2:value}\r\n   *\r\n   * @param value           Attribute value\r\n   * @returns {Object}      Object with the effectName/properties and options that have been extracted\r\n   */\r\n  parseAttributeValue(value){\r\n    if(!value) return value;\r\n    var p = value.split(\";\");\r\n    var properties = p[0];\r\n    var options = {};\r\n    if(properties[0]==\"{\" && properties[properties.length-1] == \"}\") properties = JSOL.parse(properties);\r\n\r\n    if(p.length>1) {\r\n      options = p[1];\r\n      options = JSOL.parse(options);\r\n    }\r\n    return {properties,options};\r\n  }\r\n\r\n}\r\n"]}