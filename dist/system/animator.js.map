{"version":3,"sources":["animator.js"],"names":[],"mappings":"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","file":"animator.js","sourceRoot":"/source/","sourcesContent":["import Velocity from 'velocity';\nimport JSOL from 'jsol';\n\n/**\n * Aurelia animator implementation using Velocity\n */\nexport class VelocityAnimator {\n\n  /**\n   * Default options for velocity\n   * @type {Object}\n   */\n  options = {\n    duration: 500,\n    easing:\"linear\"\n  };\n\n  /**\n   * Default enter animation\n   * @type {Object}\n   */\n  enterAnimation = {properties:\"fadeIn\",options:{duration:200}};\n  /**\n   * Default leave animation\n   * @type {Object}\n   */\n  leaveAnimation = {properties:\"fadeOut\",options:{duration:200}};\n\n  isAnimating = false;\n\n  easings = [];\n  effects = {};\n\n  constructor() {\n    this.easings = Animator.easings;\n    this.effects = Animator.Redirects;\n  }\n\n  //--------------------------------- Aurelia Animator interface\n\n  /**\n   * Run a animation by name or by manually specifying properties and options for it\n   *\n   * @param element {HTMLElement}   Element to animate\n   * @param props {Object}          element properties to animate\n   * @param options {Object}        animation options\n   *\n   * @returns {Promise} resolved when animation is complete\n   */\n  animate(element,props,options) {\n    this.isAnimating = true;\n    return new Promise(resolve=>{\n      var defaults = {\n        complete:elements=>{\n          this.isAnimating = false;\n          resolve(true);\n        }\n      };\n      Velocity(element, props, Object.assign(this.options,defaults,options));\n    });\n  }\n\n  /**\n   * Run the enter animation on an element\n   *\n   * @param element {HTMLElement}   Element to animate\n   * @returns {Promise} resolved when animation is complete\n   */\n  enter(element) {\n    return this._runElementAnimation(element,\"enter\");\n  }\n\n  /**\n   * Run the leave animation on an element\n   *\n   * @param element {HTMLElement}   Element to animate\n   * @returns {Promise} resolved when animation is complete\n   */\n  leave(element) {\n    return this._runElementAnimation(element,\"leave\");\n  }\n\n  /**\n   * Register a new effect by name\n   *\n   * @param name {String}   name for the effect\n   * @param props {Object}  properties for the effect\n   */\n  registerEffect(name,props){\n    Velocity.registerEffect(name,props);\n  }\n\n  unregisterEffect(name){\n    Velocity.unregisterEffect(name);\n  }\n\n  /**\n   * Run a seqeunce of animations, one after the other\n   *\n   * @param sequence {Array}  array of animations\n   */\n  runSequence(sequence){\n    Velocity.runSequence(sequence);\n  }\n\n  //--------------------------------- Private methods\n\n  /**\n   * Run animation by type name\n   *\n   * @param element {HTMLElement}   Element to animate\n   * @param name {String}           Name of the animation to run\n   *\n   * @returns {Promise} resolved when animation is complete\n   */\n  _runElementAnimation(element,name){\n    var properties;\n    var options = {};\n\n    //parse animation properties for this element if none were found\n    //if(!element.animations)\n      this._parseAnimations(element);\n    if(element.animations[name]) {\n      properties = element.animations[name].properties;\n      options = element.animations[name].options;\n    }\n\n    //skip if no enter animation was specified\n    if(!properties) return Promise.resolve(false);\n\n    this.isAnimating = true;\n    return new Promise(resolve=>{\n      var defaults = {\n        complete:elements=>{\n          this.isAnimating = false;\n          resolve(true);\n        }\n      };\n      options = Object.assign({},this.options,defaults,options);\n      Velocity(element, properties, options);\n    });\n  }\n\n  /**\n   * Parse animations specified in the elements attributes\n   *\n   * @param element {HTMLElement}   Element to parse animations from\n   */\n  _parseAnimations(element){\n    element.animations = {};\n    element.animations.enter = this.parseAttributeValue(element.getAttribute(\"animation-enter\"))||this.enterAnimation;\n    element.animations.leave = this.parseAttributeValue(element.getAttribute(\"animation-leave\"))||this.leaveAnimation;\n  }\n\n  /**\n   * Parse an attribute value as an animation definition\n   *\n   * syntax with effectname:     effectName:{prop1:value,prop2:value}\n   * syntax with properties:     {prop1:value,prop2:value}:{prop1:value,prop2:value}\n   *\n   * @param value           Attribute value\n   * @returns {Object}      Object with the effectName/properties and options that have been extracted\n   */\n  parseAttributeValue(value){\n    if(!value) return value;\n    var p = value.split(\";\");\n    var properties = p[0];\n    var options = {};\n    if(properties[0]==\"{\" && properties[properties.length-1] == \"}\") properties = JSOL.parse(properties);\n\n    if(p.length>1) {\n      options = p[1];\n      options = JSOL.parse(options);\n    }\n    return {properties,options};\n  }\n\n}\n"]}